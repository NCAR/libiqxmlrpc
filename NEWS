Look into ChangeLog file for full list of changes generated from CVS.

0.7.1 - 0.7.2
  * Compilation fix for GNU C++ >= 3.4
  * Remove last (I hope) obstacle of making library platform-independent:
    Replace Alarm_socket with platform-independent Reactor_interrupter.

0.7 - 0.7.1
Two new features were added:
  * Support for server-side method interceptors.

    I.e. one can wrap calls of XML-RPC methods with arbitrary amount of
    interceptors, which will do some useful job concerning any aspects, which
    orthogonal in relation to actual method's functionality.  E.g. such tasks
    as call logging, exception's handling, and security policy treatment can
    be addressed by this feature.
  
  * Ability to register plain function as XML-RPC method implementation.

    The functions with specific signature can be registered with server as
    request handlers.  Moreover the new common interface for registering
    methods with the server is introduced (while old one still remains correct
    too):

      Server s;
      register_method<MyMethod>(s, "my_method");
      register_method(s, "method2", my_function);

   An old code that was wored with prev version of library is source-level
   compatible with this version.

0.6.5 - 0.7
  This release incorporates big code changes. I believe that quality of 
  code have been greatly improved since new test suite had been intoduced.
  It allowed me to find quite interesting bugs.

  Unfortunately, the win32 port is not up-to-date. But that fact that
  I have replaced my "threads stuff" with boost::thread allows one 
  to port the whole library to Windows without much pain 
  (Alarm_sock is still an issue).

  Documentation is not in sync now too. It is related to guides embeded into
  doxygen docs. But I dont think that it is big issue: there is great test
  suite.

  New features:
    * Major test suite improvement: now there is automatic regression test
      based on boost unit test framework. It also includes stress test.
    * Now boost::thread used instead of home-made threads implementation.
    * Improved server-side interface: user methods can access server via
      special restricted interface (e.g. user's method can stop the whole
      server now, etc).

  Interface changes:
    * English refining: all words/names "fabric" replaced with "factory".
    * Now one should not use Server class directly but its children:
      Http_server or Https_server.
    * Value, Array, Struct interface changed a bit.

  Fixes:
    * Multithreading bug founded by stress test.
    * Exception safety improved.
    * Other minor fixes.

0.6.4 - 0.6.5
  * Distribution now includes configure made by autoconf-2.57.
  * An argument --disable-docs for configure has been added.
  * Some compilation fixes for win32 were made as well.
  
0.6.3 - 0.6.4
  * Better support for standard algorithms usage with iqxmlrpc::Array added.
    I.e. now one can use std::back_inserter, std::front_inserter 
    (not std::inserter) with Array and so on.
  * Support for client's persistent connections has been added
    (see iqxmlrpc::Client::set_keep_alive).
  * Minor client's code clean-up and documentation updates were made.
  
0.6.2 - 0.6.3
  * Now users' server methods aware about peer's address (Method::peer_addr()).
  * Remove 'const' modifier from Firewall_base::grant() method.
  * Other minor interface additions/code clean-ups.
  
  Fixes:
    * Properly remove used connections on client side.
    * Fix several bugs regarding socket functionality.

0.6.1 - 0.6.2
  New features:
    * Added support for optional user's firewall classes. They may decide
      whether Server should accept request from specific inet address
      (see iqnet::Firewall_base).
    * Added postfix version of ++ and -- operators to	Array::const_iterator.
    * Added libiqxmlrpc-server.pc, libiqxmlrpc-client.pc in addition to just
      libiqxmlrpc.pc.

  Fixed:
    * Client now throws iqxmlrpc::Exception rather then iqxmlrpc::Fault when
      in receives fault response from server.
    * Fixes incorrect copy constructor and operator = of class Array.
      So now one can safely do things like that:
        Array a = some_value.the_array();
    * Fix incorrect Response's copy constructor and operator =. Now one can
      safely use single Response object many times:
        Response r = client.execute( ... );
        //...
        r = client.execute( ... );
    * Got rid of some static staff which gaves errors in some conditions.
        
0.6 - 0.6.1
  * Fix compilation error on Windows.

0.5.5 - 0.6
  * Added support for server introspection.
  * Added support for Fault Code Interoperability standard.
  * Added transparent charset conversion support.
  * Fix compilation troubles on Win32.

0.5.4 - 0.5.5
  * Fix uninitialized Client::non_blocking_flag.
  * Improve treatment of socket related errors.
  * Minor clean ups.

0.5.3 - 0.5.4
  Implemented copy constructors and = operators for Array and Struct
	calsses.

0.5.2 - 0.5.3
  Fixes:
    * Fix possible hang/crash in Reactor's code during secure connection.
    * Code clean up regarding portability on VC++.

  Interface additions:
    * Added Array::const_iterator and begin/end interface.
    * Added Value::arr_begin/end() interface for access to Array::const_iterator.
    * Added const eqivs for Value::the_array() and Value::the_struct().

0.5.1 - 0.5.2
  * Added support for (non-standard) Nil datatype.
  * Got rid of of some useless and buggy code.
  * Got rid of useless VS2003 files to reduce dist's size.

0.5 - 0.5.1
  * Added ability to specify maximum size of HTTP request 
    in Server class interface via Server::set_max_request_sz().
  * Code clean.

0.4.3 - 0.5
  * Remove client's and server's headers from libiqxmlrpc.h.
    So one must include extra headers in addition to libiqxmlrpc.h.
  * Fix server's crash on exception in its particular connection object.
  * Minor architecture refactoring and code cleaning.

0.4.2 - 0.4.3
  * Port client part of library on Win32 (use MS VS 2003).

0.4.1 - 0.4.2
  * Make it portable on Solaris.
  * Fix some minor errors.
  * Client's code uses non-blocking socket only when timeout has been specified.

0.4 - 0.4.1
  * Fix compilation problem on G++ 3.4
  * Get rid of several compiler's warnings.
  * Fix documentation.

0.3.2 - 0.4
  * Added support for XML-RPC dateTime.iso8601 data type.

0.3.1 - 0.3.2
  * Added support for XML-RPC base64 datatype.

0.3 - 0.3.1
  * Move HTTP(S) clients to non-blocking socket. This allows to set timeout to
    client.
  * Various code clean-ups, minor sources reorganizing.
  * Documentation updates.

0.2.3 - 0.3
  * Add ability to run server methods in a pool of threads.
  * Minor code cleaning.
  * Update documentation.

0.2.2 - 0.2.3
  * Fix compilation problem with (new?) compilers.
  * Fix libiqxmlrpc.pc

0.2.1 - 0.2.2
  * Merge inner subproject libiqnet into main code.
  * Simplify library exceptions system.
  * Added facility to log exceptions into Server class.

0.2 - 0.2.1
  * Some fixes for HTTP protocol.
  * Minor interface fixes/improvements.
  
0.1.1 - 0.2
  * Library architecture refactoring. Add ability to add alternative method's
    execution policies. Got rid of useless classes.
  * Use select() syscall if poll() is not present in a system.
  * Various minor bug and style fixes.
  * Update documentation.

0.1.0 - 0.1.1
  * Fix some build problems;
  * Documentation update;
  * Make documentation be installed on 'make install';
  * Create RPM .spec file.
